//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/ArcadeInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ArcadeInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ArcadeInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ArcadeInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""1640a15e-81f3-4f3b-84ba-5819fa734954"",
            ""actions"": [
                {
                    ""name"": ""LeftPallet"",
                    ""type"": ""Button"",
                    ""id"": ""5c1df34f-dd01-4871-a8a8-48c395157a41"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightPallet"",
                    ""type"": ""Button"",
                    ""id"": ""90c57fbe-5fc3-40be-959e-5144ee280630"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Spring"",
                    ""type"": ""Button"",
                    ""id"": ""f9e8ca5f-3b46-497a-9b6a-a6d98f62dee8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dbfa7d6e-e504-4d54-9a4d-f19c13e8b731"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": ""Tap,Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftPallet"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c53363e-faf9-4c7a-bdbd-f56ec7353bff"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": ""Tap,Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightPallet"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07111e6f-41a6-4421-aadf-8b75e56d743f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spring"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_LeftPallet = m_Player.FindAction("LeftPallet", throwIfNotFound: true);
        m_Player_RightPallet = m_Player.FindAction("RightPallet", throwIfNotFound: true);
        m_Player_Spring = m_Player.FindAction("Spring", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_LeftPallet;
    private readonly InputAction m_Player_RightPallet;
    private readonly InputAction m_Player_Spring;
    public struct PlayerActions
    {
        private @ArcadeInputActions m_Wrapper;
        public PlayerActions(@ArcadeInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftPallet => m_Wrapper.m_Player_LeftPallet;
        public InputAction @RightPallet => m_Wrapper.m_Player_RightPallet;
        public InputAction @Spring => m_Wrapper.m_Player_Spring;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @LeftPallet.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftPallet;
                @LeftPallet.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftPallet;
                @LeftPallet.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftPallet;
                @RightPallet.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightPallet;
                @RightPallet.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightPallet;
                @RightPallet.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightPallet;
                @Spring.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSpring;
                @Spring.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSpring;
                @Spring.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSpring;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftPallet.started += instance.OnLeftPallet;
                @LeftPallet.performed += instance.OnLeftPallet;
                @LeftPallet.canceled += instance.OnLeftPallet;
                @RightPallet.started += instance.OnRightPallet;
                @RightPallet.performed += instance.OnRightPallet;
                @RightPallet.canceled += instance.OnRightPallet;
                @Spring.started += instance.OnSpring;
                @Spring.performed += instance.OnSpring;
                @Spring.canceled += instance.OnSpring;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnLeftPallet(InputAction.CallbackContext context);
        void OnRightPallet(InputAction.CallbackContext context);
        void OnSpring(InputAction.CallbackContext context);
    }
}
